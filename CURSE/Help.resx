<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="label2.Text" xml:space="preserve">
    <value>Также есть возможность настроить такие параметры, как:
экспоненциальное сглаживание, точность, количество блоков.
В дальнейших вычислениях будут применяться параметры указанные 
в соответствующие ячейки.
</value>
  </data>
  <data name="label1.Text" xml:space="preserve">
    <value>Эта вкладка является основной страницей программы. 
Здесь расположены основные элементы управления, отвечающие за работу с 
базой данных и основной таблицей. Управление осуществляется при помощи кнопок. 
Первое действие, которое нужно сделать при входе в программу, 
это установить соединение с базой данных, при помощи соответствующей кнопки. 
После того, как это выполнено, нужно выбрать таблицу. Именно с этой таблицей
и будут происходить дальнейшие расчёты.
</value>
  </data>
  <data name="label4.Text" xml:space="preserve">
    <value>Не выбрана база данных.
Чтобы исправить, нажмите на кнопку "Подключиться".
Выберите базу данных с вашего компьютера.
База данных пуста.
Чтобы исправить, убедитесь что ваша база данных 
заполнена данными.

</value>
  </data>
  <data name="label7.Text" xml:space="preserve">
    <value>Эта вкладка отвечает за первый уровень декомпозиции. 
Здесь расположены таблицы фазовых координат и мониторинга
состояния объекта. 
В правой части экрана расположены графики, включить их можно
при помощи соответствующих кнопок. Существует возможность
построить график по фазовой траектории и функции u(t), включая 
и выключая прогнозные точки

</value>
  </data>
  <data name="label8.Text" xml:space="preserve">
    <value>Не выбрана база данных.
Чтобы исправить, нажмите на кнопку "Подключиться".
Выберите базу данных с вашего компьютера.
База данных пуста.
Чтобы исправить, убедитесь что ваша база данных 
заполнена данными.

</value>
  </data>
  <data name="label5.Text" xml:space="preserve">
    <value>Автоматизированная система мониторинга предназначена для автоматизированного
наблюдения за объектом, контроля его состояния и передачи данных приёмнику сигнальной информации 
с некоторой периодичностью. Полученные данные обрабатываются преобразователем сигналов, и
записываются в базу данных, после чего используются в расчетах, для получения информации о состоянии объекта.</value>
  </data>
  <data name="label13.Text" xml:space="preserve">
    <value>Эта вкладка отвечает за второй уровень декомпозиции. 
Здесь расположены таблицы фазовых координат и мониторинга
состояния объекта, но чтобы перейти к ним нужно сначала распределить точки по блокам.
Когда точки будут распределены, нужно нажать кнопку "Подтвердить", и откроется вкладка 
с графиками и расчётами, по которым можно определить состояние отдельного блока.
В правой части экрана расположены графики, включить их можно
при помощи соответствующих кнопок. Существует возможность
построить график по фазовой траектории и функции u(t), включая прогнозные точки.

</value>
  </data>
  <data name="label14.Text" xml:space="preserve">
    <value>Не выбрана база данных.
Чтобы исправить, нажмите на кнопку "Подключиться".
Выберите базу данных с вашего компьютера.
База данных пуста.
Чтобы исправить, убедитесь что ваша база данных 
заполнена данными.

</value>
  </data>
  <data name="label16.Text" xml:space="preserve">
    <value>Эта вкладка отвечает за четвертый уровень декомпозиции. 
Данный уровень декомпозиции позволяет наблюдать за изменениями координат
на уровне отдельных точек. Выберите точки и нажмите кнопку, после чего
графики координат этих точек отобразятся на экране.
</value>
  </data>
  <data name="label17.Text" xml:space="preserve">
    <value>Не выбрана база данных.
Чтобы исправить, нажмите на кнопку "Подключиться".
Выберите базу данных с вашего компьютера.
База данных пуста.
Чтобы исправить, убедитесь что ваша база данных 
заполнена данными.

</value>
  </data>
</root>